// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
var truffleAssert = require('truffle-assertions');

// Contract variables
var sku;
var upc;
var ownerID;
var originFarmerID;
var originFarmName
var originFarmInformation
var originFarmLatitude
var originFarmLongitude
var productID
var productNotes
var productPrice
var itemState
var distributorID
var retailerID
var consumerID
const emptyAddress = '0x00000000000000000000000000000000000000'

contract('SupplyChain', (accounts) => {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    sku = 1
    upc = 1
    ownerID = accounts[0]
    originFarmerID = accounts[1]
    originFarmName = "John Doe"
    originFarmInformation = "Yarray Valley"
    originFarmLatitude = "-38.239770"
    originFarmLongitude = "144.341490"
    productID = sku + upc
    productNotes = "Best beans for Espresso"
    productPrice = web3.utils.toWei("1", "ether")
    itemState = 0 // Harvested
    distributorID = accounts[2]
    retailerID = accounts[3]
    consumerID = accounts[4]


    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])
})

describe('SupplyChain Contract', () => {
    let supplyChain;
    before(async () => {
        supplyChain = await SupplyChain.deployed()
        // Add the actors to the supply chain
        await supplyChain.addFarmer(originFarmerID)
        await supplyChain.addDistributor(distributorID)
        await supplyChain.addRetailer(retailerID)
        await supplyChain.addConsumer(consumerID)
    })

    // 1st Test (Harvesting)
    describe('harvestItem()', () => {
        it("should not be possible to call the function if the caller is not a farmer", async () => {
            await truffleAssert.reverts(
                supplyChain.processItem(upc, {from: distributorID}),
                "You must be a farmer to perform this transaction"
            )
        })
        it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
            // Mark an item as Harvested by calling function harvestItem()
            let tx = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

            // assert that the Harvested event was emitted
            truffleAssert.eventEmitted(tx, 'Harvested', (e) => {
                return e.upc = upc;
            });

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            // Verify the result set
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
            assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
            assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
            assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
            assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
            assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
            assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
            assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
            assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
            assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
            assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product ID')
            assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid product nodes')
            assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item state')
        })
    })

    // 2nd Test (Processing)
    describe('processItem()', () => {
        it("should not be possible to call the function if the caller is not a farmer", async () => {
            await truffleAssert.reverts(
                supplyChain.processItem(upc, {from: distributorID}),
                "You must be a farmer to perform this transaction"
            )
        })

        it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
            // Mark an item as Processed by calling function processtItem()
            let tx = await supplyChain.processItem(upc, {from: originFarmerID});

            // assert that the Harvested event was emitted
            truffleAssert.eventEmitted(tx, 'Processed', (e) => {
                return e.upc = upc;
            });

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            itemState = 1 // Processed

            // Verify the result set returned inlclydes the processed item
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
            assert.equal(resultBufferTwo[5], itemState, 'ItemState has not been updated to Processed');
        })

        it("should not be possible to process an item if the state of that item is not harvested", async () => {
            await truffleAssert.reverts(
                supplyChain.processItem(upc),
                "Item state must be harvested"
            )
        })
    })

    // 3rd Test (Packing)
    describe('packItem()', () => {
        it("should not be possible to call the function if the caller is not a farmer", async () => {
            await truffleAssert.reverts(
                supplyChain.packItem(upc, {from: distributorID}),
                "You must be a farmer to perform this transaction"
            )
        })

        it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
            let tx = await supplyChain.packItem(upc);

            // assert that the Harvested event was emitted
            truffleAssert.eventEmitted(tx, 'Packed', (e) => {
                return e.upc = upc;
            });

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            itemState = 2 // Packed

            // Verify the result set returned inlclydes the processed item
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
            assert.equal(resultBufferTwo[5], itemState, 'ItemState has not been updated to Packed');
        })

        it("should not be possible to pack an item if the state of that item is not processed", async () => {
            await truffleAssert.reverts(
                supplyChain.packItem(upc),
                "Item state must be processed"
            )
        })
    })

    // 4th Test (Selling)
    describe('sellItem()', () => {
        it("should not be possible to sell the item if the caller is not a farmer", async () => {
            await truffleAssert.reverts(
                supplyChain.sellItem(upc, productPrice, {from: distributorID}),
                "You must be a farmer to perform this transaction"
            )
        })

        it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
            let tx = await supplyChain.sellItem(upc, productPrice);

            // assert that the ForSale event was emitted
            truffleAssert.eventEmitted(tx, 'ForSale', (e) => {
                return e.upc = upc;
            });

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            itemState = 3 // ForSale

            // Verify the result set returned inlclydes the processed item
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
            assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid product price');
            assert.equal(resultBufferTwo[5], itemState, 'ItemState has not been updated to ForSale');
        })

        it("should not be possible to pack an item if the state of that item is not packed", async () => {
            await truffleAssert.reverts(
                supplyChain.sellItem(upc, productPrice),
                "Item state must be packed"
            )
        })
    })

    // 5th Test (Buying)
    describe('buyItem()', () => {
        it("should not be possible to buy the item if the caller is not a distributor", async () => {
            await truffleAssert.reverts(
                supplyChain.buyItem(upc, {from: originFarmerID, value: web3.utils.toWei("1", "ether")}),
                "You must be a distributor to perform this transaction"
            )
        })

        it("should not be possible to buy the item without sending enough ether", async () => {
            await truffleAssert.reverts(
                supplyChain.buyItem(upc, {from: distributorID, value: web3.utils.toWei("0.1", "ether")}),
                "Amount sent is less than the item price"
            )
        })

        it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
            let startFarmerBal = await web3.eth.getBalance(originFarmerID);
            let startDistributorBal = await web3.eth.getBalance(distributorID);
            // Call buyItem function on the supply chain
            let tx = await supplyChain.buyItem(upc, {from: distributorID, value: web3.utils.toWei("2", "ether")})

            // Assert the correct amount of ether was sent to the farmer
            let endFarmerBal = await web3.eth.getBalance(originFarmerID);
            assert.equal(endFarmerBal - startFarmerBal, productPrice)

            let endDistributorBal = await web3.eth.getBalance(distributorID)
            let gasPrice = await web3.eth.getGasPrice()
            let txGasFee = (tx.receipt.cumulativeGasUsed * gasPrice)
            // Assert that the distributer final balance is less the product price and gas fee
            assert.equal((startDistributorBal - productPrice - txGasFee), endDistributorBal)

            // assert that the ForSale event was emitted
            truffleAssert.eventEmitted(tx, 'Sold', (e) => {
                return e.upc = upc;
            });

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            itemState = 4 // Sold

            // Verify the result set returned inlclydes the processed item
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
            assert.equal(resultBufferTwo[5], itemState, 'ItemState has not been updated to Sold');
            assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid Distributor ID');
        })

        it("should not be possible to buy an item if the state of that item is not forSale", async () => {
            await truffleAssert.reverts(
                supplyChain.buyItem(upc),
                "Item state must be for sale"
            )
        })

    })

    // 6th Test (Shipping)
    describe('shipItem()', () => {
        it("should not be possible to ship the item if the caller is not a distributor", async () => {
            await truffleAssert.reverts(
                supplyChain.shipItem(upc, {from: originFarmerID}),
                "You must be a distributor to perform this transaction"
            )
        })

        it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
            let tx = await supplyChain.shipItem(upc, {from: distributorID});

            // assert that the ForSale event was emitted
            truffleAssert.eventEmitted(tx, 'Shipped', (e) => {
                return e.upc = upc;
            });

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            itemState = 5 // Shipped

            // Verify the result set returned inlclydes the processed item
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
            assert.equal(resultBufferTwo[5], itemState, 'ItemState has not been updated to Shipped');
        })

        it("should not be possible to ship an item if the state of that item is not sold", async () => {
            await truffleAssert.reverts(
                supplyChain.shipItem(upc),
                "Item state must be sold"
            )
        })
    })

    // 7th Test (Received)
    describe('receiveItem()', () => {
        it("should not be possible to receive the item if the caller is not a retailer", async () => {
            await truffleAssert.reverts(
                supplyChain.receiveItem(upc, {from: originFarmerID}),
                "You must be a retailer to perform this transaction"
            )
        })

        it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
            let tx = await supplyChain.receiveItem(upc, {from: retailerID});

            // assert that the ForSale event was emitted
            truffleAssert.eventEmitted(tx, 'Received', (e) => {
                return e.upc = upc;
            });

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            itemState = 6 // Received

            // Verify the result set returned inlclydes the processed item
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
            assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
            assert.equal(resultBufferTwo[5], itemState, 'ItemState has not been updated to Shipped');
            assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID');
        })

        it("should not be possible to receive an item if the state of that item is not shipped", async () => {
            await truffleAssert.reverts(
                supplyChain.receiveItem(upc),
                "Item state must be shipped"
            )
        })
    })

    // 8th Test (Purchased)
    describe('purchaseItem()', () => {
        it("should not be possible to purchase the item if the caller is not a consumer", async () => {
            await truffleAssert.reverts(
                supplyChain.purchaseItem(upc, {from: distributorID}),
                "You must be a consumer to perform this transaction"
            )
        })

        it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
            let tx = await supplyChain.purchaseItem(upc, {from: consumerID});

            // assert that the ForSale event was emitted
            truffleAssert.eventEmitted(tx, 'Purchased', (e) => {
                return e.upc = upc;
            });

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            itemState = 7 // Purchased

            // Verify the result set returned inlclydes the processed item
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
            assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
            assert.equal(resultBufferTwo[5], itemState, 'ItemState has not been updated to Shipped');
            assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID');
        })

        it("should not be possible to purchase an item if the state of that item is not received", async () => {
            await truffleAssert.reverts(
                supplyChain.purchaseItem(upc),
                "Item state must be received"
            )
        })
    })

    describe('fetchItemBuffer.... functions', () => {
        // 9th Test (fetchItemBufferOne)
        it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const buffer1 = await supplyChain.fetchItemBufferOne(upc)
            // Verify the result set:
            assert.equal(sku, buffer1[0], 'Error: Invalid SKU')
            assert.equal(upc, buffer1[1], 'Error: Invalid UPC')
            assert.equal(consumerID, buffer1[2], 'Error: Invalid owner ID')
            assert.equal(originFarmerID, buffer1[3], 'Error: Invalid origin farmer ID')
            assert.equal(originFarmName, buffer1[4], 'Error: Invalid origin farmer name')
            assert.equal(originFarmInformation, buffer1[5], 'Error: Invalid origin farmer information')
            assert.equal(originFarmLatitude, buffer1[6], 'Error: Invalid origin farm latitude')
            assert.equal(originFarmLongitude, buffer1[7], 'Error: Invalid origin farm longitude')
        })

        // 10th Test (fetchItemBufferTwo)
        it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const buffer2 = await supplyChain.fetchItemBufferTwo(upc)
            // Verify the result set:
            assert.equal(upc, buffer2[1], 'Error: Invalid UPC')
            assert.equal(sku, buffer2[0], 'Error: Invalid SKU')
            assert.equal(productID, buffer2[2], 'Error: Invalid product ID')
            assert.equal(productNotes, buffer2[3], 'Error: Invalid product nodes')
            assert.equal(productPrice, buffer2[4], 'Error: Invalid product price')
            assert.equal(itemState, buffer2[5], 'Error: Invalid item state')
            assert.equal(distributorID, buffer2[6], 'Error: Invalid distributor ID')
            assert.equal(retailerID, buffer2[7], 'Error: Invalid retailer ID')
            assert.equal(consumerID, buffer2[8], 'Error: Invalid consumer ID')
        })
    })
});