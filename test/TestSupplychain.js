// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
var truffleAssert = require('truffle-assertions');

// Contract variables
var sku;
var upc;
var ownerID;
var originFarmerID;
var originFarmName
var originFarmInformation
var originFarmLatitude
var originFarmLongitude
var productID
var productNotes
var productPrice
var itemState
var distributorID
var retailerID
var consumerID
const emptyAddress = '0x00000000000000000000000000000000000000'

contract('SupplyChain', (accounts) => {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    sku = 1
    upc = 1
    ownerID = accounts[0]
    originFarmerID = accounts[1]
    originFarmName = "John Doe"
    originFarmInformation = "Yarray Valley"
    originFarmLatitude = "-38.239770"
    originFarmLongitude = "144.341490"
    productID = sku + upc
    productNotes = "Best beans for Espresso"
    productPrice = web3.utils.toWei("1", "ether")
    itemState = 0 // Harvested
    distributorID = accounts[2]
    retailerID = accounts[3]
    consumerID = accounts[4]


    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])
})

describe('SupplyChain Contract', () => {
    let supplyChain;
    beforeEach(async () => {
        supplyChain = await SupplyChain.deployed()
    })

    // 1st Test (Harvesting)
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        // Mark an item as Harvested by calling function harvestItem()
        let tx = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // assert that the Harvested event was emitted
        truffleAssert.eventEmitted(tx, 'Harvested', (e) => {
            return e.upc = upc;
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product ID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid product nodes')
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item state')
    })

    // 2nd Test (Processing)
    describe('processItem()', () => {
        it("should not be possible to call the function if the caller is not a farmer", async () => {
            await truffleAssert.reverts(
                supplyChain.processItem(upc, {from: distributorID}),
                "You must be a farmer to perform this transaction"
            )
        })

        it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
            // Mark an item as Processed by calling function processtItem()
            let tx = await supplyChain.processItem(upc);

            // assert that the Harvested event was emitted
            truffleAssert.eventEmitted(tx, 'Processed', (e) => {
                return e.upc = upc;
            });

            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

            let newItemState = 1 // Processed

            // Verify the result set returned inlclydes the processed item
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
            assert.equal(resultBufferTwo[5], newItemState, 'ItemState has not been updated to Processed');
        })

        it("should not be possible to process an item if the state of that item is not harvested", async () => {
            await truffleAssert.reverts(
                supplyChain.processItem(upc),
                "Item state must be harvested"
            )
        })
    })

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Packed()


        // Mark an item as Packed by calling function packItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event ForSale()


        // Mark an item as ForSale by calling function sellItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Sold()
        var event = supplyChain.Sold()


        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Shipped()


        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Received()


        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Purchased()


        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set:

    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set:

    })
});